/*

Given a string of length n, generate all of its subsequences.

A subsequence of a given string (sequence) is a string (sequence) that is generated by
removing zero or more characters from the given string (sequence) without changing its
order.

Example

	Input : inp[] = "abc"
	Output: ["", "c", "b", "bc", "a", "ac", "ab", "abc"]

Constraints

  1 < n < 10

*/

#include<iostream>
#include<vector>
#include<set>

using namespace std;

vector<string> v;
set<string> s;

void f(char* inp, char* out, int i, int j) {

	// base case

	if (inp[i] == '\0') { // i == n
		out[j] = '\0';
		// cout << out << endl;
		// v.push_back(string(out));
		s.insert(string(out));
		return;
	}

	// recursive case

	// generate the subsequence for inp[i...n-1]

	// or take decisions for characters starting at the ith index

	// take a decision for the character at the ith index

	// 1. include inp[i] in out[]

	out[j] = inp[i];
	// j++;
	f(inp, out, i + 1, j + 1);
	// j--; // backtracking

	// 2. exclude inp[i] from out[]
	f(inp, out, i + 1, j);

}

int main() {

	char inp[] = "abc";
	char out[10];

	f(inp, out, 0, 0);

	// sort(v.begin(), v.end());

	// for (string subseq : v) {
	// 	cout << subseq << endl;
	// }

	for (string subseq : s) {
		cout << subseq << endl;
	}

	cout << endl;


	return 0;
}
